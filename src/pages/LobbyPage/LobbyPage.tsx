import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Users, Copy, Crown, UserPlus } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const LobbyPage = () => {
  const [nickname, setNickname] = useState("");
  const [gameCode, setGameCode] = useState("");
  const [isHost, setIsHost] = useState(false);
  const [copied, setCopied] = useState(false);
  const [players, setPlayers] = useState<
    { id: number; nickname: string; score: number; isHost: boolean }[]
  >([]);
  const [showJoinForm, setShowJoinForm] = useState(false);

  // In a real app, this would be generated by your backend
  const generateGameCode = () => {
    const code = Math.random().toString(36).substring(2, 8).toUpperCase();
    setGameCode(code);
    setIsHost(true);
    // Add host to players
    setPlayers([{ id: 1, nickname, score: 0, isHost: true }]);
  };

  const handleCreateGame = () => {
    if (nickname.trim()) {
      generateGameCode();
    }
  };

  const handleJoinGame = () => {
    if (nickname.trim() && gameCode.trim()) {
      // In a real app, this would verify the game code with your backend
      setPlayers((prev) => [
        ...prev,
        {
          id: prev.length + 1,
          nickname,
          score: 0,
          isHost: false,
        },
      ]);
      setShowJoinForm(false);
    }
  };

  const copyGameLink = () => {
    // In a real app, this would be your actual game URL
    const gameLink = `https://yourgame.com/join/${gameCode}`;
    navigator.clipboard.writeText(gameLink);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  if (!gameCode && !showJoinForm) {
    return (
      <div className="relative z-30 flex items-center justify-center w-full h-screen">
        <Card className="min-w-[500px] rounded-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-center">
              Join or Create Game
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button
              className="w-full py-6 rounded-xl text-lg"
              onClick={() => setShowJoinForm(true)}
            >
              <UserPlus className="mr-2 h-6 w-6" />
              Join Existing Game
            </Button>
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-white px-2 text-gray-500">Or</span>
              </div>
            </div>
            <div className="space-y-4">
              <Input
                placeholder="Enter your nickname"
                value={nickname}
                onChange={(e) => setNickname(e.target.value)}
              />
              <Button
                className="w-full py-6 rounded-xl text-lg"
                onClick={handleCreateGame}
                disabled={!nickname.trim()}
              >
                <Crown className="mr-2 h-6 w-6" />
                Create New Game
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (showJoinForm) {
    return (
      <div className="relative z-30 flex items-center justify-center w-full h-screen">
        <Card className="min-w-[500px] rounded-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Join Game</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Input
              placeholder="Enter your nickname"
              value={nickname}
              onChange={(e) => setNickname(e.target.value)}
            />
            <Input
              placeholder="Enter game code"
              value={gameCode}
              onChange={(e) => setGameCode(e.target.value.toUpperCase())}
            />
            <div className="flex gap-2">
              <Button
                className="flex-1"
                onClick={() => setShowJoinForm(false)}
                variant="outline"
              >
                Back
              </Button>
              <Button
                className="flex-1"
                onClick={handleJoinGame}
                disabled={!nickname.trim() || !gameCode.trim()}
              >
                Join Game
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div>
      <div className="relative z-30 flex items-center justify-center w-full h-screen">
        <Card className="min-w-[500px] rounded-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Game Lobby</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex items-center justify-between bg-gray-100 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <span className="font-semibold">Game Code:</span>
                <span className="font-mono text-lg">{gameCode}</span>
              </div>
              <Button variant="outline" size="sm" onClick={copyGameLink}>
                <Copy className="mr-2 h-4 w-4" />
                {copied ? "Copied!" : "Copy Link"}
              </Button>
            </div>

            {copied && (
              <Alert>
                <AlertDescription>
                  Game link copied to clipboard!
                </AlertDescription>
              </Alert>
            )}

            <div>
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Users className="h-5 w-5" />
                Players ({players.length})
              </h3>
              <div className="space-y-2">
                {players.map((player) => (
                  <div
                    key={player.id}
                    className="flex items-center justify-between p-3 bg-white border rounded-lg"
                  >
                    <div className="flex items-center gap-2">
                      {player.isHost && (
                        <Crown className="h-4 w-4 text-yellow-500" />
                      )}
                      <span>{player.nickname}</span>
                    </div>
                    <span>Score: {player.score}</span>
                  </div>
                ))}
              </div>
            </div>

            {isHost && (
              <Button className="w-full" disabled={players.length < 2}>
                Start Game
              </Button>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default LobbyPage;
